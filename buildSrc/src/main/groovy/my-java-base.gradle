//the below import is required. otherwise gradle build
//is complaining. also do a ./gradlew --stop and clean cache if required
//gradlew has some difficulty in getting visibility to these classes

import mygradleproj.tasks.*

plugins {
    id 'java'
    id 'checkstyle'
}

group = 'com.vamsi.my-app'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}

tasks.test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

dependencies.constraints {
    implementation("org.apache.commons:commons-lang3:3.9")
    implementation("com.google.errorprone:error_prone_annotations:2.9.0")
    implementation("org.slf4j:slf4j-api:1.7.32")
    implementation("org.slf4j:slf4j-simple:1.7.32")
}


dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.3")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

final var myBuildGroup = "my project build"

//get the tasks that are named tasks of the type TaskReportTask
// and tell those tasks that the display group is  myBuildGroup only
//by this, only tasks that have group as myBuildGroup will be displayed by tasks task.
//as this is in the my-java-base, it is applied across all the java plugins.

tasks.named("tasks",TaskReportTask) {          // Move all existing tasks to the group
    displayGroup = myBuildGroup
}

tasks.register( "tasksAll",TaskReportTask) {    // Register the tasksAll task
    group = myBuildGroup
    description = "Show additional tasks."
    setShowDetail(true)
}

//as the below task is only dependent on checkStyleMain and checkStyleTests
//when we invoke ./gradlew :app:qualityCheck it runs the tasks.classes which complies the java files
//and then runs the checkstyleMain. it will NOT run the tests as this task is not dependent on the
//verification task test
//this is a lifecycle task

tasks.register("qualityCheck") {
    group = myBuildGroup
    description = "Run checks (excluding tests)"
    dependsOn(tasks.classes, tasks.checkstyleMain)
    dependsOn(tasks.testClasses,tasks.checkstyleTest)
}


tasks.build {
    group = myBuildGroup;
}

tasks.check {
    group = myBuildGroup;
    description = "Run checks (including tests)"
}

tasks.register("myCustomTask", MyIntroTask)
